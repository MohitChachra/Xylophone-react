{"version":3,"sources":["assets/a.wav","assets/b.wav","assets/c2.wav","assets/c.wav","assets/d1.wav","assets/e1.wav","assets/f.wav","assets/g.wav","assets/notes.js","Xylophone.js","serviceWorker.js","index.js"],"names":["module","exports","notes","name","file","c","d1","e1","f","g","a","b","c2","NoteButton","props","className","style","height","index","onClick","Audio","note","play","xylophone","map","key","Boolean","window","location","hostname","match","ReactDOM","render","Xylophone","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,0RC+C5BC,EAnCD,CACZ,CACEC,KAAM,IACNC,KAAMC,KAER,CACEF,KAAM,KACNC,KAAME,KAER,CACEH,KAAM,KACNC,KAAMG,KAER,CACEJ,KAAM,IACNC,KAAMI,KAER,CACEL,KAAM,IACNC,KAAMK,KAER,CACEN,KAAM,IACNC,KAAMM,KAER,CACEP,KAAM,IACNC,KAAMO,KAER,CACER,KAAM,KACNC,KAAMQ,MCvCJC,G,MAAW,SAACC,GAChB,OACE,4BACEC,UAAU,cACVC,MAAO,CAACC,OAAQ,IAAK,GAAGH,EAAMI,MAAQ,MACtCC,QAAS,WAGT,IAAIC,MAAMN,EAAMO,KAAKjB,MAAMkB,SAExBR,EAAMO,KAAKlB,QA+CLoB,MA1Cf,WAgBE,OACE,yBAAKR,UAAU,QACb,yCACA,yBAAKA,UAAU,aACZb,EAAMsB,KAAI,SAACH,EAAKH,GAAN,OACX,kBAAC,EAAD,CACEA,MAASA,EAETO,IAAKJ,EAAKlB,KACVkB,KAAMA,UChCIK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAACC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.112c68e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/a.424eb0c2.wav\";","module.exports = __webpack_public_path__ + \"static/media/b.b0963b9b.wav\";","module.exports = __webpack_public_path__ + \"static/media/c2.8118569e.wav\";","module.exports = __webpack_public_path__ + \"static/media/c.98ddcc4f.wav\";","module.exports = __webpack_public_path__ + \"static/media/d1.90104779.wav\";","module.exports = __webpack_public_path__ + \"static/media/e1.48ef3003.wav\";","module.exports = __webpack_public_path__ + \"static/media/f.e3597a14.wav\";","module.exports = __webpack_public_path__ + \"static/media/g.433c4567.wav\";","import a  from './a.wav';\nimport b  from './b.wav';\nimport c2 from './c2.wav';\nimport c  from './c.wav';\nimport d1 from './d1.wav';\nimport e1 from './e1.wav';\nimport f  from './f.wav';\nimport g  from './g.wav';\n\n// To play a note, for example, the first one\n// new Audio(notes[0].file).play();\n\nconst notes = [\n  {\n    name: 'c',\n    file: c\n  },\n  {\n    name: 'd1',\n    file: d1\n  },\n  {\n    name: 'e1',\n    file: e1\n  },\n  {\n    name: 'f',\n    file: f\n  },\n  {\n    name: 'g',\n    file: g\n  },\n  {\n    name: 'a',\n    file: a\n  },\n  {\n    name: 'b',\n    file: b\n  },\n  {\n    name: 'c2',\n    file: c2\n  },\n];\n\nexport default notes;\n","import React, { useState } from 'react';\nimport notes from './assets/notes.js';\nimport './App.scss';\n\nconst NoteButton=(props)=>{\n  return(\n    <button\n      className=\"note-button\"\n      style={{height:(200-(15*props.index))+'px'}}\n      onClick={()=>{\n    //  props.addPlayedNote(props.note);\n      //console.log(props.playedNotes);\n      new Audio(props.note.file).play();\n      }}>\n        {props.note.name}\n    </button>\n  )\n}\n\nfunction xylophone(){\n  //const[playedNotes, setPlayedNotes] = useState([]);\n\n  // const replayNotes = () => {\n  //   playedNotes.map((note,index) => {\n  //     window.setTimeout(() => new Audio(node.file).play(),500*index);\n  //   });\n  // }\n\n  // const resetNotes = () =>{\n  //   setPlayedNotes([]);\n  // }\n\n  // const addPlayedNote = (note) =>{\n  //   setPlayedNotes([...playedNotes,note]);\n  // }\n  return(\n    <div className=\"page\">\n      <h1>Xylophone</h1>\n      <div className=\"xylophone\">\n        {notes.map((note,index)=>(\n        <NoteButton\n          index = {index}\n        //  addPlayedNote={addPlayedNote}\n          key={note.name}\n          note={note}/>\n          ))}\n      </div>\n      {/* {JSON.stringify(playedNotes)} */}\n      {/* <button onClick={()=>replayNotes([])}>Replay</button> */}\n      {/* <button onClick={()=>resetNotes([])}>Clear</button> */}\n    </div>\n  )\n}\n\n\n\n\n\n\n\n\nexport default xylophone;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Xylophone from './Xylophone';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <Xylophone />,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}